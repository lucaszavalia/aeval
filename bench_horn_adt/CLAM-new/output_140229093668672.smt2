(declare-datatypes ((listOfInt 0)) (((cons-listOfInt (param0 Int) (param1 listOfInt))(nil-listOfInt))))
(declare-fun append (listOfInt listOfInt ) listOfInt)
(assert (forall ((|_FH_2'| listOfInt)) (= (append nil-listOfInt |_FH_2'|) |_FH_2'|)))
(assert (forall ((A Int) (_FH_0 listOfInt) (_FH_1 listOfInt)) (= (append (cons-listOfInt A _FH_0) _FH_1) (cons-listOfInt A (append _FH_0 _FH_1)))))
(assert (not (forall ((|_FH_2'| listOfInt)) (= (append nil-listOfInt |_FH_2'|) |_FH_2'|))))
(check-sat)(declare-datatypes ((listOfInt 0)) (((cons-listOfInt (param2 Int) (param3 listOfInt))(nil-listOfInt))))
(declare-fun append (listOfInt listOfInt ) listOfInt)
(assert (forall ((|_FH_2'| listOfInt)) (= (append nil-listOfInt |_FH_2'|) |_FH_2'|)))
(assert (forall ((A Int) (_FH_0 listOfInt) (_FH_1 listOfInt)) (= (append (cons-listOfInt A _FH_0) _FH_1) (cons-listOfInt A (append _FH_0 _FH_1)))))
(assert (not (forall ((A Int) (_FH_0 listOfInt) (_FH_1 listOfInt)) (= (append (cons-listOfInt A _FH_0) _FH_1) (cons-listOfInt A (append _FH_0 _FH_1))))))
(check-sat)(declare-datatypes ((listOfInt 0)) (((cons-listOfInt (param4 Int) (param5 listOfInt))(nil-listOfInt))))
(declare-fun append (listOfInt listOfInt ) listOfInt)
(declare-fun rev (listOfInt ) listOfInt)
(assert (forall ((|_FH_2'| listOfInt)) (= (append nil-listOfInt |_FH_2'|) |_FH_2'|)))
(assert (forall ((A Int) (_FH_0 listOfInt) (_FH_1 listOfInt)) (= (append (cons-listOfInt A _FH_0) _FH_1) (cons-listOfInt A (append _FH_0 _FH_1)))))
(assert (= (rev nil-listOfInt) nil-listOfInt))
(assert (forall ((A Int) (_FH_3 listOfInt)) (= (rev (cons-listOfInt A _FH_3)) (append (rev _FH_3) (cons-listOfInt A nil-listOfInt)))))
(assert (not (= (rev nil-listOfInt) nil-listOfInt)))
(check-sat)(declare-datatypes ((listOfInt 0)) (((cons-listOfInt (param6 Int) (param7 listOfInt))(nil-listOfInt))))
(declare-fun append (listOfInt listOfInt ) listOfInt)
(declare-fun rev (listOfInt ) listOfInt)
(assert (forall ((|_FH_2'| listOfInt)) (= (append nil-listOfInt |_FH_2'|) |_FH_2'|)))
(assert (forall ((A Int) (_FH_0 listOfInt) (_FH_1 listOfInt)) (= (append (cons-listOfInt A _FH_0) _FH_1) (cons-listOfInt A (append _FH_0 _FH_1)))))
(assert (= (rev nil-listOfInt) nil-listOfInt))
(assert (forall ((A Int) (_FH_3 listOfInt)) (= (rev (cons-listOfInt A _FH_3)) (append (rev _FH_3) (cons-listOfInt A nil-listOfInt)))))
(assert (not (forall ((A Int) (_FH_3 listOfInt)) (= (rev (cons-listOfInt A _FH_3)) (append (rev _FH_3) (cons-listOfInt A nil-listOfInt))))))
(check-sat)(declare-datatypes ((listOfInt 0)) (((cons-listOfInt (param8 Int) (param9 listOfInt))(nil-listOfInt))))
(declare-fun append (listOfInt listOfInt ) listOfInt)
(declare-fun rev (listOfInt ) listOfInt)
(assert (forall ((|_FH_2'| listOfInt)) (= (append nil-listOfInt |_FH_2'|) |_FH_2'|)))
(assert (forall ((A Int) (_FH_0 listOfInt) (_FH_1 listOfInt)) (= (append (cons-listOfInt A _FH_0) _FH_1) (cons-listOfInt A (append _FH_0 _FH_1)))))
(assert (= (rev nil-listOfInt) nil-listOfInt))
(assert (forall ((A Int) (_FH_3 listOfInt)) (= (rev (cons-listOfInt A _FH_3)) (append (rev _FH_3) (cons-listOfInt A nil-listOfInt)))))
(assert (not (forall ((_FH_3 listOfInt)) (= (rev (rev _FH_3)) _FH_3))))
(check-sat)